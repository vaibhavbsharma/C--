Terminals unused in grammar

   ERROR


State 2 conflicts: 6 shift/reduce
State 20 conflicts: 6 shift/reduce
State 29 conflicts: 6 shift/reduce
State 43 conflicts: 6 shift/reduce
State 66 conflicts: 6 shift/reduce, 1 reduce/reduce
State 84 conflicts: 6 shift/reduce, 1 reduce/reduce
State 131 conflicts: 12 shift/reduce
State 147 conflicts: 12 shift/reduce
State 153 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: global_decl_list

    2 global_decl_list: global_decl_list global_decl
    3                 | %empty

    4 global_decl: decl_list function_decl
    5            | function_decl

    6 function_decl: type ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE

    7 block: decl_list stmt_list
    8      | %empty

    9 stmt_list: stmt_list stmt
   10          | %empty

   11 param_list: param_var_decl
   12           | param_list MK_COMMA param_var_decl
   13           | %empty

   14 param_var_decl: param_type param_id_list

   15 param_id_list: ID param_id_tail

   16 param_id_tail: MK_LB CONST MK_RB param_id_tail
   17              | MK_LB MK_RB param_id_tail
   18              | %empty

   19 param_type: INT
   20           | FLOAT
   21           | VOID
   22           | STRUCT ID

   23 stmt: MK_LBRACE block MK_RBRACE
   24     | IF MK_LPAREN expr MK_RPAREN stmt else_tail
   25     | WHILE MK_LPAREN expr MK_RPAREN stmt
   26     | FOR MK_LPAREN assign_expr MK_SEMICOLON expr MK_SEMICOLON assign_expr MK_RPAREN stmt
   27     | assign_expr MK_SEMICOLON
   28     | WRITE MK_LPAREN SCONST MK_RPAREN MK_SEMICOLON
   29     | WRITE MK_LPAREN lhs MK_RPAREN MK_SEMICOLON
   30     | RETURN expr MK_SEMICOLON
   31     | error

   32 else_tail: ELSE stmt
   33          | %empty

   34 assign_expr: lhs OP_ASSIGN assign_expr_tail

   35 assign_expr_tail: expr
   36                 | READ MK_LPAREN MK_RPAREN
   37                 | FREAD MK_LPAREN MK_RPAREN
   38                 | function_call

   39 function_call: ID MK_LPAREN call_param_list MK_RPAREN

   40 call_param_list: lhs call_param_list_tail
   41                | CONST call_param_list_tail
   42                | %empty

   43 call_param_list_tail: MK_COMMA lhs call_param_list_tail
   44                     | MK_COMMA CONST call_param_list_tail
   45                     | %empty

   46 lhs: ID expr_id_tail expr_member

   47 expr_id_tail: MK_LB CONST MK_RB expr_id_tail
   48             | MK_LB ID MK_RB expr_id_tail
   49             | %empty

   50 expr_member: MK_DOT lhs
   51            | %empty

   52 expr: lhs
   53     | MK_LPAREN expr MK_RPAREN
   54     | expr binop expr
   55     | unop expr
   56     | CONST

   57 binop: OP_AND
   58      | OP_OR
   59      | OP_EQ
   60      | OP_NE
   61      | OP_LT
   62      | OP_GT
   63      | OP_LE
   64      | OP_GE
   65      | OP_PLUS
   66      | OP_MINUS
   67      | OP_TIMES
   68      | OP_DIVIDE

   69 unop: OP_NOT
   70     | OP_MINUS

   71 decl_list: decl_list decl
   72          | decl
   73          | %empty

   74 decl: type_decl MK_SEMICOLON
   75     | var_decl

   76 var_decl: type id_list MK_SEMICOLON

   77 id_list: ID id_tail id_list_tail

   78 id_list_tail: MK_COMMA id_list
   79             | %empty

   80 id_tail: MK_LB CONST MK_RB id_tail
   81        | OP_ASSIGN CONST
   82        | %empty

   83 type: INT
   84     | FLOAT
   85     | VOID
   86     | TYPEDEF_NAME
   87     | STRUCT ID struct_or_null_block
   88     | STRUCT struct_block

   89 struct_or_null_block: MK_LBRACE decl_list MK_RBRACE
   90                     | %empty

   91 struct_block: MK_LBRACE decl_list MK_RBRACE

   92 type_decl: struct_decl
   93          | typedef_decl

   94 struct_decl: STRUCT ID MK_LBRACE decl_list MK_RBRACE

   95 typedef_decl: TYPEDEF type ID


Terminals, with rules where they appear

$end (0) 0
error (256) 31
ID (258) 6 15 22 39 46 48 77 87 94 95
TYPEDEF_NAME (259) 86
CONST (260) 16 41 44 47 56 80 81
SCONST (261) 28
VOID (262) 21 85
INT (263) 19 83
FLOAT (264) 20 84
IF (265) 24
ELSE (266) 32
WHILE (267) 25
FOR (268) 26
STRUCT (269) 22 87 88 94
TYPEDEF (270) 95
READ (271) 36
FREAD (272) 37
WRITE (273) 28 29
OP_ASSIGN (274) 34 81
OP_OR (275) 58
OP_AND (276) 57
OP_NOT (277) 69
OP_EQ (278) 59
OP_NE (279) 60
OP_GT (280) 62
OP_LT (281) 61
OP_GE (282) 64
OP_LE (283) 63
OP_PLUS (284) 65
OP_MINUS (285) 66 70
OP_TIMES (286) 67
OP_DIVIDE (287) 68
MK_LB (288) 16 17 47 48 80
MK_RB (289) 16 17 47 48 80
MK_LPAREN (290) 6 24 25 26 28 29 36 37 39 53
MK_RPAREN (291) 6 24 25 26 28 29 36 37 39 53
MK_LBRACE (292) 6 23 89 91 94
MK_RBRACE (293) 6 23 89 91 94
MK_COMMA (294) 12 43 44 78
MK_SEMICOLON (295) 26 27 28 29 30 74 76
MK_DOT (296) 50
ERROR (297)
RETURN (298) 30


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
program (45)
    on left: 1, on right: 0
global_decl_list (46)
    on left: 2 3, on right: 1 2
global_decl (47)
    on left: 4 5, on right: 2
function_decl (48)
    on left: 6, on right: 4 5
block (49)
    on left: 7 8, on right: 6 23
stmt_list (50)
    on left: 9 10, on right: 7 9
param_list (51)
    on left: 11 12 13, on right: 6 12
param_var_decl (52)
    on left: 14, on right: 11 12
param_id_list (53)
    on left: 15, on right: 14
param_id_tail (54)
    on left: 16 17 18, on right: 15 16 17
param_type (55)
    on left: 19 20 21 22, on right: 14
stmt (56)
    on left: 23 24 25 26 27 28 29 30 31, on right: 9 24 25 26 32
else_tail (57)
    on left: 32 33, on right: 24
assign_expr (58)
    on left: 34, on right: 26 27
assign_expr_tail (59)
    on left: 35 36 37 38, on right: 34
function_call (60)
    on left: 39, on right: 38
call_param_list (61)
    on left: 40 41 42, on right: 39
call_param_list_tail (62)
    on left: 43 44 45, on right: 40 41 43 44
lhs (63)
    on left: 46, on right: 29 34 40 43 50 52
expr_id_tail (64)
    on left: 47 48 49, on right: 46 47 48
expr_member (65)
    on left: 50 51, on right: 46
expr (66)
    on left: 52 53 54 55 56, on right: 24 25 26 30 35 53 54 55
binop (67)
    on left: 57 58 59 60 61 62 63 64 65 66 67 68, on right: 54
unop (68)
    on left: 69 70, on right: 55
decl_list (69)
    on left: 71 72 73, on right: 4 7 71 89 91 94
decl (70)
    on left: 74 75, on right: 71 72
var_decl (71)
    on left: 76, on right: 75
id_list (72)
    on left: 77, on right: 76 78
id_list_tail (73)
    on left: 78 79, on right: 77
id_tail (74)
    on left: 80 81 82, on right: 77 80
type (75)
    on left: 83 84 85 86 87 88, on right: 6 76 95
struct_or_null_block (76)
    on left: 89 90, on right: 87
struct_block (77)
    on left: 91, on right: 88
type_decl (78)
    on left: 92 93, on right: 74
struct_decl (79)
    on left: 94, on right: 92
typedef_decl (80)
    on left: 95, on right: 93


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (global_decl_list)

    program           go to state 1
    global_decl_list  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: global_decl_list .
    2 global_decl_list: global_decl_list . global_decl

    TYPEDEF_NAME  shift, and go to state 4
    VOID          shift, and go to state 5
    INT           shift, and go to state 6
    FLOAT         shift, and go to state 7
    STRUCT        shift, and go to state 8
    TYPEDEF       shift, and go to state 9

    TYPEDEF_NAME  [reduce using rule 73 (decl_list)]
    VOID          [reduce using rule 73 (decl_list)]
    INT           [reduce using rule 73 (decl_list)]
    FLOAT         [reduce using rule 73 (decl_list)]
    STRUCT        [reduce using rule 73 (decl_list)]
    TYPEDEF       [reduce using rule 73 (decl_list)]
    $default      reduce using rule 1 (program)

    global_decl    go to state 10
    function_decl  go to state 11
    decl_list      go to state 12
    decl           go to state 13
    var_decl       go to state 14
    type           go to state 15
    type_decl      go to state 16
    struct_decl    go to state 17
    typedef_decl   go to state 18


State 3

    0 $accept: program $end .

    $default  accept


State 4

   86 type: TYPEDEF_NAME .

    $default  reduce using rule 86 (type)


State 5

   85 type: VOID .

    $default  reduce using rule 85 (type)


State 6

   83 type: INT .

    $default  reduce using rule 83 (type)


State 7

   84 type: FLOAT .

    $default  reduce using rule 84 (type)


State 8

   87 type: STRUCT . ID struct_or_null_block
   88     | STRUCT . struct_block
   94 struct_decl: STRUCT . ID MK_LBRACE decl_list MK_RBRACE

    ID         shift, and go to state 19
    MK_LBRACE  shift, and go to state 20

    struct_block  go to state 21


State 9

   95 typedef_decl: TYPEDEF . type ID

    TYPEDEF_NAME  shift, and go to state 4
    VOID          shift, and go to state 5
    INT           shift, and go to state 6
    FLOAT         shift, and go to state 7
    STRUCT        shift, and go to state 22

    type  go to state 23


State 10

    2 global_decl_list: global_decl_list global_decl .

    $default  reduce using rule 2 (global_decl_list)


State 11

    5 global_decl: function_decl .

    $default  reduce using rule 5 (global_decl)


State 12

    4 global_decl: decl_list . function_decl
   71 decl_list: decl_list . decl

    TYPEDEF_NAME  shift, and go to state 4
    VOID          shift, and go to state 5
    INT           shift, and go to state 6
    FLOAT         shift, and go to state 7
    STRUCT        shift, and go to state 8
    TYPEDEF       shift, and go to state 9

    function_decl  go to state 24
    decl           go to state 25
    var_decl       go to state 14
    type           go to state 15
    type_decl      go to state 16
    struct_decl    go to state 17
    typedef_decl   go to state 18


State 13

   72 decl_list: decl .

    $default  reduce using rule 72 (decl_list)


State 14

   75 decl: var_decl .

    $default  reduce using rule 75 (decl)


State 15

    6 function_decl: type . ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE
   76 var_decl: type . id_list MK_SEMICOLON

    ID  shift, and go to state 26

    id_list  go to state 27


State 16

   74 decl: type_decl . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 28


State 17

   92 type_decl: struct_decl .

    $default  reduce using rule 92 (type_decl)


State 18

   93 type_decl: typedef_decl .

    $default  reduce using rule 93 (type_decl)


State 19

   87 type: STRUCT ID . struct_or_null_block
   94 struct_decl: STRUCT ID . MK_LBRACE decl_list MK_RBRACE

    MK_LBRACE  shift, and go to state 29

    $default  reduce using rule 90 (struct_or_null_block)

    struct_or_null_block  go to state 30


State 20

   91 struct_block: MK_LBRACE . decl_list MK_RBRACE

    TYPEDEF_NAME  shift, and go to state 4
    VOID          shift, and go to state 5
    INT           shift, and go to state 6
    FLOAT         shift, and go to state 7
    STRUCT        shift, and go to state 8
    TYPEDEF       shift, and go to state 9

    TYPEDEF_NAME  [reduce using rule 73 (decl_list)]
    VOID          [reduce using rule 73 (decl_list)]
    INT           [reduce using rule 73 (decl_list)]
    FLOAT         [reduce using rule 73 (decl_list)]
    STRUCT        [reduce using rule 73 (decl_list)]
    TYPEDEF       [reduce using rule 73 (decl_list)]
    $default      reduce using rule 73 (decl_list)

    decl_list     go to state 31
    decl          go to state 13
    var_decl      go to state 14
    type          go to state 32
    type_decl     go to state 16
    struct_decl   go to state 17
    typedef_decl  go to state 18


State 21

   88 type: STRUCT struct_block .

    $default  reduce using rule 88 (type)


State 22

   87 type: STRUCT . ID struct_or_null_block
   88     | STRUCT . struct_block

    ID         shift, and go to state 33
    MK_LBRACE  shift, and go to state 20

    struct_block  go to state 21


State 23

   95 typedef_decl: TYPEDEF type . ID

    ID  shift, and go to state 34


State 24

    4 global_decl: decl_list function_decl .

    $default  reduce using rule 4 (global_decl)


State 25

   71 decl_list: decl_list decl .

    $default  reduce using rule 71 (decl_list)


State 26

    6 function_decl: type ID . MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE
   77 id_list: ID . id_tail id_list_tail

    OP_ASSIGN  shift, and go to state 35
    MK_LB      shift, and go to state 36
    MK_LPAREN  shift, and go to state 37

    $default  reduce using rule 82 (id_tail)

    id_tail  go to state 38


State 27

   76 var_decl: type id_list . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 39


State 28

   74 decl: type_decl MK_SEMICOLON .

    $default  reduce using rule 74 (decl)


State 29

   89 struct_or_null_block: MK_LBRACE . decl_list MK_RBRACE
   94 struct_decl: STRUCT ID MK_LBRACE . decl_list MK_RBRACE

    TYPEDEF_NAME  shift, and go to state 4
    VOID          shift, and go to state 5
    INT           shift, and go to state 6
    FLOAT         shift, and go to state 7
    STRUCT        shift, and go to state 8
    TYPEDEF       shift, and go to state 9

    TYPEDEF_NAME  [reduce using rule 73 (decl_list)]
    VOID          [reduce using rule 73 (decl_list)]
    INT           [reduce using rule 73 (decl_list)]
    FLOAT         [reduce using rule 73 (decl_list)]
    STRUCT        [reduce using rule 73 (decl_list)]
    TYPEDEF       [reduce using rule 73 (decl_list)]
    $default      reduce using rule 73 (decl_list)

    decl_list     go to state 40
    decl          go to state 13
    var_decl      go to state 14
    type          go to state 32
    type_decl     go to state 16
    struct_decl   go to state 17
    typedef_decl  go to state 18


State 30

   87 type: STRUCT ID struct_or_null_block .

    $default  reduce using rule 87 (type)


State 31

   71 decl_list: decl_list . decl
   91 struct_block: MK_LBRACE decl_list . MK_RBRACE

    TYPEDEF_NAME  shift, and go to state 4
    VOID          shift, and go to state 5
    INT           shift, and go to state 6
    FLOAT         shift, and go to state 7
    STRUCT        shift, and go to state 8
    TYPEDEF       shift, and go to state 9
    MK_RBRACE     shift, and go to state 41

    decl          go to state 25
    var_decl      go to state 14
    type          go to state 32
    type_decl     go to state 16
    struct_decl   go to state 17
    typedef_decl  go to state 18


State 32

   76 var_decl: type . id_list MK_SEMICOLON

    ID  shift, and go to state 42

    id_list  go to state 27


State 33

   87 type: STRUCT ID . struct_or_null_block

    MK_LBRACE  shift, and go to state 43

    $default  reduce using rule 90 (struct_or_null_block)

    struct_or_null_block  go to state 30


State 34

   95 typedef_decl: TYPEDEF type ID .

    $default  reduce using rule 95 (typedef_decl)


State 35

   81 id_tail: OP_ASSIGN . CONST

    CONST  shift, and go to state 44


State 36

   80 id_tail: MK_LB . CONST MK_RB id_tail

    CONST  shift, and go to state 45


State 37

    6 function_decl: type ID MK_LPAREN . param_list MK_RPAREN MK_LBRACE block MK_RBRACE

    VOID    shift, and go to state 46
    INT     shift, and go to state 47
    FLOAT   shift, and go to state 48
    STRUCT  shift, and go to state 49

    $default  reduce using rule 13 (param_list)

    param_list      go to state 50
    param_var_decl  go to state 51
    param_type      go to state 52


State 38

   77 id_list: ID id_tail . id_list_tail

    MK_COMMA  shift, and go to state 53

    $default  reduce using rule 79 (id_list_tail)

    id_list_tail  go to state 54


State 39

   76 var_decl: type id_list MK_SEMICOLON .

    $default  reduce using rule 76 (var_decl)


State 40

   71 decl_list: decl_list . decl
   89 struct_or_null_block: MK_LBRACE decl_list . MK_RBRACE
   94 struct_decl: STRUCT ID MK_LBRACE decl_list . MK_RBRACE

    TYPEDEF_NAME  shift, and go to state 4
    VOID          shift, and go to state 5
    INT           shift, and go to state 6
    FLOAT         shift, and go to state 7
    STRUCT        shift, and go to state 8
    TYPEDEF       shift, and go to state 9
    MK_RBRACE     shift, and go to state 55

    decl          go to state 25
    var_decl      go to state 14
    type          go to state 32
    type_decl     go to state 16
    struct_decl   go to state 17
    typedef_decl  go to state 18


State 41

   91 struct_block: MK_LBRACE decl_list MK_RBRACE .

    $default  reduce using rule 91 (struct_block)


State 42

   77 id_list: ID . id_tail id_list_tail

    OP_ASSIGN  shift, and go to state 35
    MK_LB      shift, and go to state 36

    $default  reduce using rule 82 (id_tail)

    id_tail  go to state 38


State 43

   89 struct_or_null_block: MK_LBRACE . decl_list MK_RBRACE

    TYPEDEF_NAME  shift, and go to state 4
    VOID          shift, and go to state 5
    INT           shift, and go to state 6
    FLOAT         shift, and go to state 7
    STRUCT        shift, and go to state 8
    TYPEDEF       shift, and go to state 9

    TYPEDEF_NAME  [reduce using rule 73 (decl_list)]
    VOID          [reduce using rule 73 (decl_list)]
    INT           [reduce using rule 73 (decl_list)]
    FLOAT         [reduce using rule 73 (decl_list)]
    STRUCT        [reduce using rule 73 (decl_list)]
    TYPEDEF       [reduce using rule 73 (decl_list)]
    $default      reduce using rule 73 (decl_list)

    decl_list     go to state 56
    decl          go to state 13
    var_decl      go to state 14
    type          go to state 32
    type_decl     go to state 16
    struct_decl   go to state 17
    typedef_decl  go to state 18


State 44

   81 id_tail: OP_ASSIGN CONST .

    $default  reduce using rule 81 (id_tail)


State 45

   80 id_tail: MK_LB CONST . MK_RB id_tail

    MK_RB  shift, and go to state 57


State 46

   21 param_type: VOID .

    $default  reduce using rule 21 (param_type)


State 47

   19 param_type: INT .

    $default  reduce using rule 19 (param_type)


State 48

   20 param_type: FLOAT .

    $default  reduce using rule 20 (param_type)


State 49

   22 param_type: STRUCT . ID

    ID  shift, and go to state 58


State 50

    6 function_decl: type ID MK_LPAREN param_list . MK_RPAREN MK_LBRACE block MK_RBRACE
   12 param_list: param_list . MK_COMMA param_var_decl

    MK_RPAREN  shift, and go to state 59
    MK_COMMA   shift, and go to state 60


State 51

   11 param_list: param_var_decl .

    $default  reduce using rule 11 (param_list)


State 52

   14 param_var_decl: param_type . param_id_list

    ID  shift, and go to state 61

    param_id_list  go to state 62


State 53

   78 id_list_tail: MK_COMMA . id_list

    ID  shift, and go to state 42

    id_list  go to state 63


State 54

   77 id_list: ID id_tail id_list_tail .

    $default  reduce using rule 77 (id_list)


State 55

   89 struct_or_null_block: MK_LBRACE decl_list MK_RBRACE .
   94 struct_decl: STRUCT ID MK_LBRACE decl_list MK_RBRACE .

    MK_SEMICOLON  reduce using rule 94 (struct_decl)
    $default      reduce using rule 89 (struct_or_null_block)


State 56

   71 decl_list: decl_list . decl
   89 struct_or_null_block: MK_LBRACE decl_list . MK_RBRACE

    TYPEDEF_NAME  shift, and go to state 4
    VOID          shift, and go to state 5
    INT           shift, and go to state 6
    FLOAT         shift, and go to state 7
    STRUCT        shift, and go to state 8
    TYPEDEF       shift, and go to state 9
    MK_RBRACE     shift, and go to state 64

    decl          go to state 25
    var_decl      go to state 14
    type          go to state 32
    type_decl     go to state 16
    struct_decl   go to state 17
    typedef_decl  go to state 18


State 57

   80 id_tail: MK_LB CONST MK_RB . id_tail

    OP_ASSIGN  shift, and go to state 35
    MK_LB      shift, and go to state 36

    $default  reduce using rule 82 (id_tail)

    id_tail  go to state 65


State 58

   22 param_type: STRUCT ID .

    $default  reduce using rule 22 (param_type)


State 59

    6 function_decl: type ID MK_LPAREN param_list MK_RPAREN . MK_LBRACE block MK_RBRACE

    MK_LBRACE  shift, and go to state 66


State 60

   12 param_list: param_list MK_COMMA . param_var_decl

    VOID    shift, and go to state 46
    INT     shift, and go to state 47
    FLOAT   shift, and go to state 48
    STRUCT  shift, and go to state 49

    param_var_decl  go to state 67
    param_type      go to state 52


State 61

   15 param_id_list: ID . param_id_tail

    MK_LB  shift, and go to state 68

    $default  reduce using rule 18 (param_id_tail)

    param_id_tail  go to state 69


State 62

   14 param_var_decl: param_type param_id_list .

    $default  reduce using rule 14 (param_var_decl)


State 63

   78 id_list_tail: MK_COMMA id_list .

    $default  reduce using rule 78 (id_list_tail)


State 64

   89 struct_or_null_block: MK_LBRACE decl_list MK_RBRACE .

    $default  reduce using rule 89 (struct_or_null_block)


State 65

   80 id_tail: MK_LB CONST MK_RB id_tail .

    $default  reduce using rule 80 (id_tail)


State 66

    6 function_decl: type ID MK_LPAREN param_list MK_RPAREN MK_LBRACE . block MK_RBRACE

    TYPEDEF_NAME  shift, and go to state 4
    VOID          shift, and go to state 5
    INT           shift, and go to state 6
    FLOAT         shift, and go to state 7
    STRUCT        shift, and go to state 8
    TYPEDEF       shift, and go to state 9

    TYPEDEF_NAME  [reduce using rule 73 (decl_list)]
    VOID          [reduce using rule 73 (decl_list)]
    INT           [reduce using rule 73 (decl_list)]
    FLOAT         [reduce using rule 73 (decl_list)]
    STRUCT        [reduce using rule 73 (decl_list)]
    TYPEDEF       [reduce using rule 73 (decl_list)]
    MK_RBRACE     reduce using rule 8 (block)
    MK_RBRACE     [reduce using rule 73 (decl_list)]
    $default      reduce using rule 73 (decl_list)

    block         go to state 70
    decl_list     go to state 71
    decl          go to state 13
    var_decl      go to state 14
    type          go to state 32
    type_decl     go to state 16
    struct_decl   go to state 17
    typedef_decl  go to state 18


State 67

   12 param_list: param_list MK_COMMA param_var_decl .

    $default  reduce using rule 12 (param_list)


State 68

   16 param_id_tail: MK_LB . CONST MK_RB param_id_tail
   17              | MK_LB . MK_RB param_id_tail

    CONST  shift, and go to state 72
    MK_RB  shift, and go to state 73


State 69

   15 param_id_list: ID param_id_tail .

    $default  reduce using rule 15 (param_id_list)


State 70

    6 function_decl: type ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block . MK_RBRACE

    MK_RBRACE  shift, and go to state 74


State 71

    7 block: decl_list . stmt_list
   71 decl_list: decl_list . decl

    TYPEDEF_NAME  shift, and go to state 4
    VOID          shift, and go to state 5
    INT           shift, and go to state 6
    FLOAT         shift, and go to state 7
    STRUCT        shift, and go to state 8
    TYPEDEF       shift, and go to state 9

    $default  reduce using rule 10 (stmt_list)

    stmt_list     go to state 75
    decl          go to state 25
    var_decl      go to state 14
    type          go to state 32
    type_decl     go to state 16
    struct_decl   go to state 17
    typedef_decl  go to state 18


State 72

   16 param_id_tail: MK_LB CONST . MK_RB param_id_tail

    MK_RB  shift, and go to state 76


State 73

   17 param_id_tail: MK_LB MK_RB . param_id_tail

    MK_LB  shift, and go to state 68

    $default  reduce using rule 18 (param_id_tail)

    param_id_tail  go to state 77


State 74

    6 function_decl: type ID MK_LPAREN param_list MK_RPAREN MK_LBRACE block MK_RBRACE .

    $default  reduce using rule 6 (function_decl)


State 75

    7 block: decl_list stmt_list .
    9 stmt_list: stmt_list . stmt

    error      shift, and go to state 78
    ID         shift, and go to state 79
    IF         shift, and go to state 80
    WHILE      shift, and go to state 81
    FOR        shift, and go to state 82
    WRITE      shift, and go to state 83
    MK_LBRACE  shift, and go to state 84
    RETURN     shift, and go to state 85

    MK_RBRACE  reduce using rule 7 (block)

    stmt         go to state 86
    assign_expr  go to state 87
    lhs          go to state 88


State 76

   16 param_id_tail: MK_LB CONST MK_RB . param_id_tail

    MK_LB  shift, and go to state 68

    $default  reduce using rule 18 (param_id_tail)

    param_id_tail  go to state 89


State 77

   17 param_id_tail: MK_LB MK_RB param_id_tail .

    $default  reduce using rule 17 (param_id_tail)


State 78

   31 stmt: error .

    $default  reduce using rule 31 (stmt)


State 79

   46 lhs: ID . expr_id_tail expr_member

    MK_LB  shift, and go to state 90

    $default  reduce using rule 49 (expr_id_tail)

    expr_id_tail  go to state 91


State 80

   24 stmt: IF . MK_LPAREN expr MK_RPAREN stmt else_tail

    MK_LPAREN  shift, and go to state 92


State 81

   25 stmt: WHILE . MK_LPAREN expr MK_RPAREN stmt

    MK_LPAREN  shift, and go to state 93


State 82

   26 stmt: FOR . MK_LPAREN assign_expr MK_SEMICOLON expr MK_SEMICOLON assign_expr MK_RPAREN stmt

    MK_LPAREN  shift, and go to state 94


State 83

   28 stmt: WRITE . MK_LPAREN SCONST MK_RPAREN MK_SEMICOLON
   29     | WRITE . MK_LPAREN lhs MK_RPAREN MK_SEMICOLON

    MK_LPAREN  shift, and go to state 95


State 84

   23 stmt: MK_LBRACE . block MK_RBRACE

    TYPEDEF_NAME  shift, and go to state 4
    VOID          shift, and go to state 5
    INT           shift, and go to state 6
    FLOAT         shift, and go to state 7
    STRUCT        shift, and go to state 8
    TYPEDEF       shift, and go to state 9

    TYPEDEF_NAME  [reduce using rule 73 (decl_list)]
    VOID          [reduce using rule 73 (decl_list)]
    INT           [reduce using rule 73 (decl_list)]
    FLOAT         [reduce using rule 73 (decl_list)]
    STRUCT        [reduce using rule 73 (decl_list)]
    TYPEDEF       [reduce using rule 73 (decl_list)]
    MK_RBRACE     reduce using rule 8 (block)
    MK_RBRACE     [reduce using rule 73 (decl_list)]
    $default      reduce using rule 73 (decl_list)

    block         go to state 96
    decl_list     go to state 71
    decl          go to state 13
    var_decl      go to state 14
    type          go to state 32
    type_decl     go to state 16
    struct_decl   go to state 17
    typedef_decl  go to state 18


State 85

   30 stmt: RETURN . expr MK_SEMICOLON

    ID         shift, and go to state 79
    CONST      shift, and go to state 97
    OP_NOT     shift, and go to state 98
    OP_MINUS   shift, and go to state 99
    MK_LPAREN  shift, and go to state 100

    lhs   go to state 101
    expr  go to state 102
    unop  go to state 103


State 86

    9 stmt_list: stmt_list stmt .

    $default  reduce using rule 9 (stmt_list)


State 87

   27 stmt: assign_expr . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 104


State 88

   34 assign_expr: lhs . OP_ASSIGN assign_expr_tail

    OP_ASSIGN  shift, and go to state 105


State 89

   16 param_id_tail: MK_LB CONST MK_RB param_id_tail .

    $default  reduce using rule 16 (param_id_tail)


State 90

   47 expr_id_tail: MK_LB . CONST MK_RB expr_id_tail
   48             | MK_LB . ID MK_RB expr_id_tail

    ID     shift, and go to state 106
    CONST  shift, and go to state 107


State 91

   46 lhs: ID expr_id_tail . expr_member

    MK_DOT  shift, and go to state 108

    $default  reduce using rule 51 (expr_member)

    expr_member  go to state 109


State 92

   24 stmt: IF MK_LPAREN . expr MK_RPAREN stmt else_tail

    ID         shift, and go to state 79
    CONST      shift, and go to state 97
    OP_NOT     shift, and go to state 98
    OP_MINUS   shift, and go to state 99
    MK_LPAREN  shift, and go to state 100

    lhs   go to state 101
    expr  go to state 110
    unop  go to state 103


State 93

   25 stmt: WHILE MK_LPAREN . expr MK_RPAREN stmt

    ID         shift, and go to state 79
    CONST      shift, and go to state 97
    OP_NOT     shift, and go to state 98
    OP_MINUS   shift, and go to state 99
    MK_LPAREN  shift, and go to state 100

    lhs   go to state 101
    expr  go to state 111
    unop  go to state 103


State 94

   26 stmt: FOR MK_LPAREN . assign_expr MK_SEMICOLON expr MK_SEMICOLON assign_expr MK_RPAREN stmt

    ID  shift, and go to state 79

    assign_expr  go to state 112
    lhs          go to state 88


State 95

   28 stmt: WRITE MK_LPAREN . SCONST MK_RPAREN MK_SEMICOLON
   29     | WRITE MK_LPAREN . lhs MK_RPAREN MK_SEMICOLON

    ID      shift, and go to state 79
    SCONST  shift, and go to state 113

    lhs  go to state 114


State 96

   23 stmt: MK_LBRACE block . MK_RBRACE

    MK_RBRACE  shift, and go to state 115


State 97

   56 expr: CONST .

    $default  reduce using rule 56 (expr)


State 98

   69 unop: OP_NOT .

    $default  reduce using rule 69 (unop)


State 99

   70 unop: OP_MINUS .

    $default  reduce using rule 70 (unop)


State 100

   53 expr: MK_LPAREN . expr MK_RPAREN

    ID         shift, and go to state 79
    CONST      shift, and go to state 97
    OP_NOT     shift, and go to state 98
    OP_MINUS   shift, and go to state 99
    MK_LPAREN  shift, and go to state 100

    lhs   go to state 101
    expr  go to state 116
    unop  go to state 103


State 101

   52 expr: lhs .

    $default  reduce using rule 52 (expr)


State 102

   30 stmt: RETURN expr . MK_SEMICOLON
   54 expr: expr . binop expr

    OP_OR         shift, and go to state 117
    OP_AND        shift, and go to state 118
    OP_EQ         shift, and go to state 119
    OP_NE         shift, and go to state 120
    OP_GT         shift, and go to state 121
    OP_LT         shift, and go to state 122
    OP_GE         shift, and go to state 123
    OP_LE         shift, and go to state 124
    OP_PLUS       shift, and go to state 125
    OP_MINUS      shift, and go to state 126
    OP_TIMES      shift, and go to state 127
    OP_DIVIDE     shift, and go to state 128
    MK_SEMICOLON  shift, and go to state 129

    binop  go to state 130


State 103

   55 expr: unop . expr

    ID         shift, and go to state 79
    CONST      shift, and go to state 97
    OP_NOT     shift, and go to state 98
    OP_MINUS   shift, and go to state 99
    MK_LPAREN  shift, and go to state 100

    lhs   go to state 101
    expr  go to state 131
    unop  go to state 103


State 104

   27 stmt: assign_expr MK_SEMICOLON .

    $default  reduce using rule 27 (stmt)


State 105

   34 assign_expr: lhs OP_ASSIGN . assign_expr_tail

    ID         shift, and go to state 132
    CONST      shift, and go to state 97
    READ       shift, and go to state 133
    FREAD      shift, and go to state 134
    OP_NOT     shift, and go to state 98
    OP_MINUS   shift, and go to state 99
    MK_LPAREN  shift, and go to state 100

    assign_expr_tail  go to state 135
    function_call     go to state 136
    lhs               go to state 101
    expr              go to state 137
    unop              go to state 103


State 106

   48 expr_id_tail: MK_LB ID . MK_RB expr_id_tail

    MK_RB  shift, and go to state 138


State 107

   47 expr_id_tail: MK_LB CONST . MK_RB expr_id_tail

    MK_RB  shift, and go to state 139


State 108

   50 expr_member: MK_DOT . lhs

    ID  shift, and go to state 79

    lhs  go to state 140


State 109

   46 lhs: ID expr_id_tail expr_member .

    $default  reduce using rule 46 (lhs)


State 110

   24 stmt: IF MK_LPAREN expr . MK_RPAREN stmt else_tail
   54 expr: expr . binop expr

    OP_OR      shift, and go to state 117
    OP_AND     shift, and go to state 118
    OP_EQ      shift, and go to state 119
    OP_NE      shift, and go to state 120
    OP_GT      shift, and go to state 121
    OP_LT      shift, and go to state 122
    OP_GE      shift, and go to state 123
    OP_LE      shift, and go to state 124
    OP_PLUS    shift, and go to state 125
    OP_MINUS   shift, and go to state 126
    OP_TIMES   shift, and go to state 127
    OP_DIVIDE  shift, and go to state 128
    MK_RPAREN  shift, and go to state 141

    binop  go to state 130


State 111

   25 stmt: WHILE MK_LPAREN expr . MK_RPAREN stmt
   54 expr: expr . binop expr

    OP_OR      shift, and go to state 117
    OP_AND     shift, and go to state 118
    OP_EQ      shift, and go to state 119
    OP_NE      shift, and go to state 120
    OP_GT      shift, and go to state 121
    OP_LT      shift, and go to state 122
    OP_GE      shift, and go to state 123
    OP_LE      shift, and go to state 124
    OP_PLUS    shift, and go to state 125
    OP_MINUS   shift, and go to state 126
    OP_TIMES   shift, and go to state 127
    OP_DIVIDE  shift, and go to state 128
    MK_RPAREN  shift, and go to state 142

    binop  go to state 130


State 112

   26 stmt: FOR MK_LPAREN assign_expr . MK_SEMICOLON expr MK_SEMICOLON assign_expr MK_RPAREN stmt

    MK_SEMICOLON  shift, and go to state 143


State 113

   28 stmt: WRITE MK_LPAREN SCONST . MK_RPAREN MK_SEMICOLON

    MK_RPAREN  shift, and go to state 144


State 114

   29 stmt: WRITE MK_LPAREN lhs . MK_RPAREN MK_SEMICOLON

    MK_RPAREN  shift, and go to state 145


State 115

   23 stmt: MK_LBRACE block MK_RBRACE .

    $default  reduce using rule 23 (stmt)


State 116

   53 expr: MK_LPAREN expr . MK_RPAREN
   54     | expr . binop expr

    OP_OR      shift, and go to state 117
    OP_AND     shift, and go to state 118
    OP_EQ      shift, and go to state 119
    OP_NE      shift, and go to state 120
    OP_GT      shift, and go to state 121
    OP_LT      shift, and go to state 122
    OP_GE      shift, and go to state 123
    OP_LE      shift, and go to state 124
    OP_PLUS    shift, and go to state 125
    OP_MINUS   shift, and go to state 126
    OP_TIMES   shift, and go to state 127
    OP_DIVIDE  shift, and go to state 128
    MK_RPAREN  shift, and go to state 146

    binop  go to state 130


State 117

   58 binop: OP_OR .

    $default  reduce using rule 58 (binop)


State 118

   57 binop: OP_AND .

    $default  reduce using rule 57 (binop)


State 119

   59 binop: OP_EQ .

    $default  reduce using rule 59 (binop)


State 120

   60 binop: OP_NE .

    $default  reduce using rule 60 (binop)


State 121

   62 binop: OP_GT .

    $default  reduce using rule 62 (binop)


State 122

   61 binop: OP_LT .

    $default  reduce using rule 61 (binop)


State 123

   64 binop: OP_GE .

    $default  reduce using rule 64 (binop)


State 124

   63 binop: OP_LE .

    $default  reduce using rule 63 (binop)


State 125

   65 binop: OP_PLUS .

    $default  reduce using rule 65 (binop)


State 126

   66 binop: OP_MINUS .

    $default  reduce using rule 66 (binop)


State 127

   67 binop: OP_TIMES .

    $default  reduce using rule 67 (binop)


State 128

   68 binop: OP_DIVIDE .

    $default  reduce using rule 68 (binop)


State 129

   30 stmt: RETURN expr MK_SEMICOLON .

    $default  reduce using rule 30 (stmt)


State 130

   54 expr: expr binop . expr

    ID         shift, and go to state 79
    CONST      shift, and go to state 97
    OP_NOT     shift, and go to state 98
    OP_MINUS   shift, and go to state 99
    MK_LPAREN  shift, and go to state 100

    lhs   go to state 101
    expr  go to state 147
    unop  go to state 103


State 131

   54 expr: expr . binop expr
   55     | unop expr .

    OP_OR      shift, and go to state 117
    OP_AND     shift, and go to state 118
    OP_EQ      shift, and go to state 119
    OP_NE      shift, and go to state 120
    OP_GT      shift, and go to state 121
    OP_LT      shift, and go to state 122
    OP_GE      shift, and go to state 123
    OP_LE      shift, and go to state 124
    OP_PLUS    shift, and go to state 125
    OP_MINUS   shift, and go to state 126
    OP_TIMES   shift, and go to state 127
    OP_DIVIDE  shift, and go to state 128

    OP_OR      [reduce using rule 55 (expr)]
    OP_AND     [reduce using rule 55 (expr)]
    OP_EQ      [reduce using rule 55 (expr)]
    OP_NE      [reduce using rule 55 (expr)]
    OP_GT      [reduce using rule 55 (expr)]
    OP_LT      [reduce using rule 55 (expr)]
    OP_GE      [reduce using rule 55 (expr)]
    OP_LE      [reduce using rule 55 (expr)]
    OP_PLUS    [reduce using rule 55 (expr)]
    OP_MINUS   [reduce using rule 55 (expr)]
    OP_TIMES   [reduce using rule 55 (expr)]
    OP_DIVIDE  [reduce using rule 55 (expr)]
    $default   reduce using rule 55 (expr)

    binop  go to state 130


State 132

   39 function_call: ID . MK_LPAREN call_param_list MK_RPAREN
   46 lhs: ID . expr_id_tail expr_member

    MK_LB      shift, and go to state 90
    MK_LPAREN  shift, and go to state 148

    $default  reduce using rule 49 (expr_id_tail)

    expr_id_tail  go to state 91


State 133

   36 assign_expr_tail: READ . MK_LPAREN MK_RPAREN

    MK_LPAREN  shift, and go to state 149


State 134

   37 assign_expr_tail: FREAD . MK_LPAREN MK_RPAREN

    MK_LPAREN  shift, and go to state 150


State 135

   34 assign_expr: lhs OP_ASSIGN assign_expr_tail .

    $default  reduce using rule 34 (assign_expr)


State 136

   38 assign_expr_tail: function_call .

    $default  reduce using rule 38 (assign_expr_tail)


State 137

   35 assign_expr_tail: expr .
   54 expr: expr . binop expr

    OP_OR      shift, and go to state 117
    OP_AND     shift, and go to state 118
    OP_EQ      shift, and go to state 119
    OP_NE      shift, and go to state 120
    OP_GT      shift, and go to state 121
    OP_LT      shift, and go to state 122
    OP_GE      shift, and go to state 123
    OP_LE      shift, and go to state 124
    OP_PLUS    shift, and go to state 125
    OP_MINUS   shift, and go to state 126
    OP_TIMES   shift, and go to state 127
    OP_DIVIDE  shift, and go to state 128

    $default  reduce using rule 35 (assign_expr_tail)

    binop  go to state 130


State 138

   48 expr_id_tail: MK_LB ID MK_RB . expr_id_tail

    MK_LB  shift, and go to state 90

    $default  reduce using rule 49 (expr_id_tail)

    expr_id_tail  go to state 151


State 139

   47 expr_id_tail: MK_LB CONST MK_RB . expr_id_tail

    MK_LB  shift, and go to state 90

    $default  reduce using rule 49 (expr_id_tail)

    expr_id_tail  go to state 152


State 140

   50 expr_member: MK_DOT lhs .

    $default  reduce using rule 50 (expr_member)


State 141

   24 stmt: IF MK_LPAREN expr MK_RPAREN . stmt else_tail

    error      shift, and go to state 78
    ID         shift, and go to state 79
    IF         shift, and go to state 80
    WHILE      shift, and go to state 81
    FOR        shift, and go to state 82
    WRITE      shift, and go to state 83
    MK_LBRACE  shift, and go to state 84
    RETURN     shift, and go to state 85

    stmt         go to state 153
    assign_expr  go to state 87
    lhs          go to state 88


State 142

   25 stmt: WHILE MK_LPAREN expr MK_RPAREN . stmt

    error      shift, and go to state 78
    ID         shift, and go to state 79
    IF         shift, and go to state 80
    WHILE      shift, and go to state 81
    FOR        shift, and go to state 82
    WRITE      shift, and go to state 83
    MK_LBRACE  shift, and go to state 84
    RETURN     shift, and go to state 85

    stmt         go to state 154
    assign_expr  go to state 87
    lhs          go to state 88


State 143

   26 stmt: FOR MK_LPAREN assign_expr MK_SEMICOLON . expr MK_SEMICOLON assign_expr MK_RPAREN stmt

    ID         shift, and go to state 79
    CONST      shift, and go to state 97
    OP_NOT     shift, and go to state 98
    OP_MINUS   shift, and go to state 99
    MK_LPAREN  shift, and go to state 100

    lhs   go to state 101
    expr  go to state 155
    unop  go to state 103


State 144

   28 stmt: WRITE MK_LPAREN SCONST MK_RPAREN . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 156


State 145

   29 stmt: WRITE MK_LPAREN lhs MK_RPAREN . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 157


State 146

   53 expr: MK_LPAREN expr MK_RPAREN .

    $default  reduce using rule 53 (expr)


State 147

   54 expr: expr . binop expr
   54     | expr binop expr .

    OP_OR      shift, and go to state 117
    OP_AND     shift, and go to state 118
    OP_EQ      shift, and go to state 119
    OP_NE      shift, and go to state 120
    OP_GT      shift, and go to state 121
    OP_LT      shift, and go to state 122
    OP_GE      shift, and go to state 123
    OP_LE      shift, and go to state 124
    OP_PLUS    shift, and go to state 125
    OP_MINUS   shift, and go to state 126
    OP_TIMES   shift, and go to state 127
    OP_DIVIDE  shift, and go to state 128

    OP_OR      [reduce using rule 54 (expr)]
    OP_AND     [reduce using rule 54 (expr)]
    OP_EQ      [reduce using rule 54 (expr)]
    OP_NE      [reduce using rule 54 (expr)]
    OP_GT      [reduce using rule 54 (expr)]
    OP_LT      [reduce using rule 54 (expr)]
    OP_GE      [reduce using rule 54 (expr)]
    OP_LE      [reduce using rule 54 (expr)]
    OP_PLUS    [reduce using rule 54 (expr)]
    OP_MINUS   [reduce using rule 54 (expr)]
    OP_TIMES   [reduce using rule 54 (expr)]
    OP_DIVIDE  [reduce using rule 54 (expr)]
    $default   reduce using rule 54 (expr)

    binop  go to state 130


State 148

   39 function_call: ID MK_LPAREN . call_param_list MK_RPAREN

    ID     shift, and go to state 79
    CONST  shift, and go to state 158

    $default  reduce using rule 42 (call_param_list)

    call_param_list  go to state 159
    lhs              go to state 160


State 149

   36 assign_expr_tail: READ MK_LPAREN . MK_RPAREN

    MK_RPAREN  shift, and go to state 161


State 150

   37 assign_expr_tail: FREAD MK_LPAREN . MK_RPAREN

    MK_RPAREN  shift, and go to state 162


State 151

   48 expr_id_tail: MK_LB ID MK_RB expr_id_tail .

    $default  reduce using rule 48 (expr_id_tail)


State 152

   47 expr_id_tail: MK_LB CONST MK_RB expr_id_tail .

    $default  reduce using rule 47 (expr_id_tail)


State 153

   24 stmt: IF MK_LPAREN expr MK_RPAREN stmt . else_tail

    ELSE  shift, and go to state 163

    ELSE      [reduce using rule 33 (else_tail)]
    $default  reduce using rule 33 (else_tail)

    else_tail  go to state 164


State 154

   25 stmt: WHILE MK_LPAREN expr MK_RPAREN stmt .

    $default  reduce using rule 25 (stmt)


State 155

   26 stmt: FOR MK_LPAREN assign_expr MK_SEMICOLON expr . MK_SEMICOLON assign_expr MK_RPAREN stmt
   54 expr: expr . binop expr

    OP_OR         shift, and go to state 117
    OP_AND        shift, and go to state 118
    OP_EQ         shift, and go to state 119
    OP_NE         shift, and go to state 120
    OP_GT         shift, and go to state 121
    OP_LT         shift, and go to state 122
    OP_GE         shift, and go to state 123
    OP_LE         shift, and go to state 124
    OP_PLUS       shift, and go to state 125
    OP_MINUS      shift, and go to state 126
    OP_TIMES      shift, and go to state 127
    OP_DIVIDE     shift, and go to state 128
    MK_SEMICOLON  shift, and go to state 165

    binop  go to state 130


State 156

   28 stmt: WRITE MK_LPAREN SCONST MK_RPAREN MK_SEMICOLON .

    $default  reduce using rule 28 (stmt)


State 157

   29 stmt: WRITE MK_LPAREN lhs MK_RPAREN MK_SEMICOLON .

    $default  reduce using rule 29 (stmt)


State 158

   41 call_param_list: CONST . call_param_list_tail

    MK_COMMA  shift, and go to state 166

    $default  reduce using rule 45 (call_param_list_tail)

    call_param_list_tail  go to state 167


State 159

   39 function_call: ID MK_LPAREN call_param_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 168


State 160

   40 call_param_list: lhs . call_param_list_tail

    MK_COMMA  shift, and go to state 166

    $default  reduce using rule 45 (call_param_list_tail)

    call_param_list_tail  go to state 169


State 161

   36 assign_expr_tail: READ MK_LPAREN MK_RPAREN .

    $default  reduce using rule 36 (assign_expr_tail)


State 162

   37 assign_expr_tail: FREAD MK_LPAREN MK_RPAREN .

    $default  reduce using rule 37 (assign_expr_tail)


State 163

   32 else_tail: ELSE . stmt

    error      shift, and go to state 78
    ID         shift, and go to state 79
    IF         shift, and go to state 80
    WHILE      shift, and go to state 81
    FOR        shift, and go to state 82
    WRITE      shift, and go to state 83
    MK_LBRACE  shift, and go to state 84
    RETURN     shift, and go to state 85

    stmt         go to state 170
    assign_expr  go to state 87
    lhs          go to state 88


State 164

   24 stmt: IF MK_LPAREN expr MK_RPAREN stmt else_tail .

    $default  reduce using rule 24 (stmt)


State 165

   26 stmt: FOR MK_LPAREN assign_expr MK_SEMICOLON expr MK_SEMICOLON . assign_expr MK_RPAREN stmt

    ID  shift, and go to state 79

    assign_expr  go to state 171
    lhs          go to state 88


State 166

   43 call_param_list_tail: MK_COMMA . lhs call_param_list_tail
   44                     | MK_COMMA . CONST call_param_list_tail

    ID     shift, and go to state 79
    CONST  shift, and go to state 172

    lhs  go to state 173


State 167

   41 call_param_list: CONST call_param_list_tail .

    $default  reduce using rule 41 (call_param_list)


State 168

   39 function_call: ID MK_LPAREN call_param_list MK_RPAREN .

    $default  reduce using rule 39 (function_call)


State 169

   40 call_param_list: lhs call_param_list_tail .

    $default  reduce using rule 40 (call_param_list)


State 170

   32 else_tail: ELSE stmt .

    $default  reduce using rule 32 (else_tail)


State 171

   26 stmt: FOR MK_LPAREN assign_expr MK_SEMICOLON expr MK_SEMICOLON assign_expr . MK_RPAREN stmt

    MK_RPAREN  shift, and go to state 174


State 172

   44 call_param_list_tail: MK_COMMA CONST . call_param_list_tail

    MK_COMMA  shift, and go to state 166

    $default  reduce using rule 45 (call_param_list_tail)

    call_param_list_tail  go to state 175


State 173

   43 call_param_list_tail: MK_COMMA lhs . call_param_list_tail

    MK_COMMA  shift, and go to state 166

    $default  reduce using rule 45 (call_param_list_tail)

    call_param_list_tail  go to state 176


State 174

   26 stmt: FOR MK_LPAREN assign_expr MK_SEMICOLON expr MK_SEMICOLON assign_expr MK_RPAREN . stmt

    error      shift, and go to state 78
    ID         shift, and go to state 79
    IF         shift, and go to state 80
    WHILE      shift, and go to state 81
    FOR        shift, and go to state 82
    WRITE      shift, and go to state 83
    MK_LBRACE  shift, and go to state 84
    RETURN     shift, and go to state 85

    stmt         go to state 177
    assign_expr  go to state 87
    lhs          go to state 88


State 175

   44 call_param_list_tail: MK_COMMA CONST call_param_list_tail .

    $default  reduce using rule 44 (call_param_list_tail)


State 176

   43 call_param_list_tail: MK_COMMA lhs call_param_list_tail .

    $default  reduce using rule 43 (call_param_list_tail)


State 177

   26 stmt: FOR MK_LPAREN assign_expr MK_SEMICOLON expr MK_SEMICOLON assign_expr MK_RPAREN stmt .

    $default  reduce using rule 26 (stmt)
